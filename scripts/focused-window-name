#!/usr/bin/python3

#
# Copyright 2019 Bence Ferdinandy <bence@ferdinandy.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# USAGE:
#
# Can read from environment variables (filter_list and short_length) or
# from command line arguments, but the latter takes precendence.
#
#
import argparse
import os
import subprocess
import sys

from i3ipc import Connection, Event


def escape(name):
    name = name.replace("&", "&amp;")
    name = name.replace("<", "&lt;")
    name = name.replace(">", "&gt;")
    name = name.replace('"', "&quot;")
    if "repos" in name.lower() or "akvo" in name.lower():
        name = name + ' <span color = "#e3e8e4"> <span color ="#FFF" >Git</span></span>'
    if "sudo" in name.lower():
        name = name.replace("sudo", '<span color = "#c46464">SUDO</span>')
    if "dok" in name.split(" ") or "dok" == name:
        name = '<span color = "#1f93ff"></span> ' + name
    elif "python" in name.lower():
        name = '<span color = "#f2ef22"></span> ' + name
    elif "node" in name.lower():
        name = '<span color = "#34e346"></span> ' + name
    elif "mpv" in name.lower():
        name = '<span color = "#c421ff"></span> ' + name
    elif "postman" in name.lower():
        name = '<span color = "#ff2121"></span> ' + name
    elif "libreoffice" in name.lower():
        name = '<span color = "#ff2121"></span> ' + name
    elif "settings" in name.lower():
        name = '<span color = "#999999"></span> ' + name
    elif "skype" in name.lower():
        name = '<span color = "#408de6"></span> ' + name
    elif "zulip" in name.lower():
        name = '<span color = "#5D3FD3"><b>Z</b></span> ' + name
    elif "dedenbangkit@linux" in name:
        name = name.replace("dedenbangkit@linux", "")
        name = '<span color = "#8a71a3"></span> ' + name
    elif "vim" in name:
        name = '<span color = "#00FF00"></span> ' + name.capitalize()
    elif "emacs" in name.lower():
        name = name.replace("emacs", "Emacs")
        name = '<span color = "#ab64c4"></span> ' + name
    elif "Firefox" in name:
        name = '<span color = "#FFA500"></span> Firefox'
    elif "Chrome" in name:
        name = '<span color = "#89CFF0"></span> Chrome'
    else:
        name = '<span color = "#fff81f"></span> ~ ' + name
    return name


def value_span(value):
    return f'<span font_desc="{value_font}" color = "{value_color}" > {value} </span>'


parser = argparse.ArgumentParser(
    description="Returns the title of the currently focused window"
)
parser.add_argument(
    "-f",
    "--filter_list",
    nargs="+",
    help="only return window title if the window instance is in the provided list, eg. specifying libreoffice will result in only instance of libreoffice being returned",
)
parser.add_argument(
    "-s",
    "--short_length",
    type=int,
    help="max number of characters to print for short version",
)
args = parser.parse_args()

filter_list_env = os.environ.get("filter_list")
short_length_env = os.environ.get("short_length")

value_color, err = subprocess.Popen(
    ["xrescat", "i3xrocks.color", "#D8DEE9"], stdout=subprocess.PIPE
).communicate()
value_color = value_color.decode("utf-8")
label_color, err = subprocess.Popen(
    ["xrescat", "i3xrocks.color", "#7B8394"], stdout=subprocess.PIPE
).communicate()
label_color = label_color.decode("utf-8")
value_font, err = subprocess.Popen(
    ["xrescat", "i3xrocks.value.font", "sans"],
    stdout=subprocess.PIPE,
).communicate()
value_font = value_font.decode("utf-8")


if filter_list_env is None and args.filter_list is None:
    filter_list = []
elif args.filter_list is None:
    filter_list = filter_list_env.split()
else:
    filter_list = args.filter_list

if short_length_env is None and args.short_length is None:
    short_length = 10
elif args.short_length is None:
    short_length = int(short_length_env)
else:
    short_length = args.short_length
i3 = Connection()
focused = i3.get_tree().find_focused()

if focused is None:
    sys.exit()

name = (
    focused.name
    if hasattr(focused, "name") and focused.name is not None
    else sys.exit()
)
instance = focused.window_instance if hasattr(focused, "window_instance") else None
if instance is None:
    sys.exit()

if len(filter_list) == 0 or instance in filter_list:
    print(escape(name))
    # print(value_span(escape(name)))
    # print(value_span(escape(name[:short_length])))
